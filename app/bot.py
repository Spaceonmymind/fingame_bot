import os
import asyncio
import csv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from sqlalchemy.orm import Session

from db import SessionLocal, engine, Base
from models import Registration

import random, string

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ---
def generate_unique_id(session: Session) -> str:
    while True:
        candidate = "FG-" + "".join(random.choices(string.ascii_uppercase + string.digits, k=6))
        exists = session.query(Registration).filter_by(unique_id=candidate).first()
        if not exists:
            return candidate

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
Base.metadata.create_all(bind=engine)
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä ---
game_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé≤ –ö—É–ø–∏–º–∞–Ω–∏—è")],
        [KeyboardButton(text="üåç –ú–∏—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤")]
    ],
    resize_keyboard=True
)

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –§–∏–Ω–ò–≥—Ä—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        reply_markup=game_keyboard
    )

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
@dp.message(F.text.in_(["üé≤ –ö—É–ø–∏–º–∞–Ω–∏—è", "üåç –ú–∏—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤"]))
async def register_game(message: types.Message):
    session: Session = SessionLocal()
    try:
        game = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
        existing = (
            session.query(Registration)
            .filter_by(telegram_id=message.from_user.id, game=game)
            .first()
        )

        if existing:
            await message.answer(
                f"‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!\n"
                f"–ò–≥—Ä–∞: {game}\n"
                f"–í–∞—à ID: {existing.unique_id}\n"
                f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if not existing.used else '‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}"
            )
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
        unique_id = generate_unique_id(session)

        reg = Registration(
            telegram_id=message.from_user.id,
            game=game,
            unique_id=unique_id
        )
        session.add(reg)
        session.commit()

        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–ò–≥—Ä–∞: {game}\n"
            f"–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {unique_id}\n\n"
            f"–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É."
        )

        await bot.send_message(
            ADMIN_ID,
            f"‚úÖ –ù–æ–≤—ã–π ID\n–ò–≥—Ä–∞: {game}\nID: {unique_id}"
        )

    finally:
        session.close()

# --- –û—Ç–º–µ—Ç–∏—Ç—å ID –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π ---
@dp.message(Command("use"))
async def admin_use(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /use FG-XXXXXX")
        return

    id_to_use = args[1].strip()
    session: Session = SessionLocal()
    try:
        reg = session.query(Registration).filter_by(unique_id=id_to_use).first()
        if not reg:
            await message.answer(f"‚ùå ID {id_to_use} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        if reg.used:
            await message.answer(f"‚ö†Ô∏è ID {id_to_use} —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ!")
            return

        reg.used = True
        session.commit()

        await message.answer(f"‚úÖ ID {id_to_use} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π (–∏–≥—Ä–∞: {reg.game}).")

    finally:
        session.close()

# --- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π ---
@dp.message(Command("list"))
async def admin_list(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    session: Session = SessionLocal()
    try:
        regs = session.query(Registration).order_by(Registration.created_at).all()
        if not regs:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
            return

        text = "üìã –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:\n\n"
        for r in regs:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if not r.used else "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
            text += f"{r.unique_id} ‚Üí {r.game} ‚Üí {status}\n"

        await message.answer(text)
    finally:
        session.close()

# --- –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV ---
@dp.message(Command("export"))
async def admin_export(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    session: Session = SessionLocal()
    try:
        regs = session.query(Registration).all()
        if not regs:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
            return

        filename = "registrations.csv"
        with open(filename, "w", newline="") as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(["unique_id", "game", "telegram_id", "created_at", "status"])
            for r in regs:
                status = "active" if not r.used else "used"
                writer.writerow([r.unique_id, r.game, r.telegram_id, r.created_at, status])

        await bot.send_document(
            ADMIN_ID,
            FSInputFile(filename, filename)
        )
        os.remove(filename)
    finally:
        session.close()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
