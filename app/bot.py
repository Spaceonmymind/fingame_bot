import os
import asyncio
import csv
import random, string
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy.orm import Session

from db import SessionLocal, engine, Base
from models import Registration
from utils import slots

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID ---
def generate_unique_id(session: Session) -> str:
    while True:
        candidate = "FG-" + "".join(random.choices(string.ascii_uppercase + string.digits, k=6))
        exists = session.query(Registration).filter_by(unique_id=candidate).first()
        if not exists:
            return candidate

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
Base.metadata.create_all(bind=engine)
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

# --- –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ---
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_ID", "").replace(" ", "").split(",") if x]


# --- FSM ---
class RegisterGame(StatesGroup):
    choosing_game = State()
    choosing_slot = State()


# --- –°—Ç–∞—Ä—Ç ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()

    game_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ö—É–ø–∏–º–∞–Ω–∏—è", callback_data="game_kupimania")],
        [InlineKeyboardButton(text="üåç –ú–∏—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="game_mir")]
    ])

    await state.set_state(RegisterGame.choosing_game)
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –§–∏–Ω–ò–≥—Ä—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=game_keyboard)


# --- –í—ã–±–æ—Ä –∏–≥—Ä—ã ---
@dp.callback_query(F.data.startswith("game_"))
async def choose_game(callback: types.CallbackQuery, state: FSMContext):
    game = "–ö—É–ø–∏–º–∞–Ω–∏—è" if callback.data == "game_kupimania" else "–ú–∏—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤"

    session: Session = SessionLocal()
    existing = session.query(Registration).filter_by(
        telegram_id=callback.from_user.id, game=game
    ).first()

    if existing:
        await callback.message.answer(
            f"‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            f"–ò–≥—Ä–∞: {game}\n"
            f"–î–∞—Ç–∞: {existing.slot_date}\n"
            f"–í—Ä–µ–º—è: {existing.slot_time}\n"
            f"–í–∞—à ID: {existing.unique_id}"
        )
        session.close()
        await callback.answer()
        return

    await state.update_data(game=game)

    available_slots = []
    for date, times in slots.items():
        for time in times:
            count = session.query(Registration).filter_by(game=game, slot_date=date, slot_time=time).count()
            if count < 4:
                available_slots.append((date, time))
    session.close()

    if not available_slots:
        await callback.message.answer("‚ùå –î–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
        await state.clear()
        await callback.answer()
        return

    slot_buttons = [[InlineKeyboardButton(text=f"{d} {t}", callback_data=f"slot_{d}_{t}")]
                    for d, t in available_slots]
    slot_keyboard = InlineKeyboardMarkup(inline_keyboard=slot_buttons)

    await state.set_state(RegisterGame.choosing_slot)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {game}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:", reply_markup=slot_keyboard)
    await callback.answer()


# --- –í—ã–±–æ—Ä —Å–ª–æ—Ç–∞ ---
@dp.callback_query(F.data.startswith("slot_"))
async def register_slot(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_", 2)
    slot_date, slot_time = parts[1], parts[2]
    data = await state.get_data()
    game = data.get("game")

    session: Session = SessionLocal()
    try:
        count = session.query(Registration).filter_by(game=game, slot_date=slot_date, slot_time=slot_time).count()
        if count >= 4:
            await callback.message.answer("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            await callback.answer()
            return

        unique_id = generate_unique_id(session)
        reg = Registration(
            telegram_id=callback.from_user.id,
            game=game,
            slot_date=slot_date,
            slot_time=slot_time,
            unique_id=unique_id
        )
        session.add(reg)
        session.commit()

        await callback.message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–ò–≥—Ä–∞: {game}\n"
            f"–î–∞—Ç–∞: {slot_date}\n"
            f"–í—Ä–µ–º—è: {slot_time}\n"
            f"–í–∞—à ID: {unique_id}\n\n"
            f"–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É."
        )

        # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"‚úÖ –ù–æ–≤—ã–π ID\n–ò–≥—Ä–∞: {game}\n–î–∞—Ç–∞: {slot_date}\n–í—Ä–µ–º—è: {slot_time}\nID: {unique_id}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    finally:
        session.close()
        await state.clear()
        await callback.answer()


# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ---
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


@dp.message(Command("list"))
async def admin_list(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    session: Session = SessionLocal()
    try:
        regs = session.query(Registration).order_by(Registration.slot_date, Registration.slot_time).all()
        if not regs:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
            return

        text = "üìã –°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:\n\n"
        for r in regs:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if not r.used else "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
            text += f"{r.unique_id} ‚Üí {r.game} ‚Üí {r.slot_date} {r.slot_time} ‚Üí {status}\n"

        await message.answer(text if len(text) < 4000 else text[:4000])
    finally:
        session.close()


@dp.message(Command("export"))
async def admin_export(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    session: Session = SessionLocal()
    try:
        regs = session.query(Registration).order_by(Registration.slot_date, Registration.slot_time).all()
        if not regs:
            await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
            return

        filename = "registrations.csv"
        with open(filename, "w", newline="") as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(["unique_id", "game", "slot_date", "slot_time", "telegram_id", "created_at", "status"])
            for r in regs:
                status = "active" if not r.used else "used"
                writer.writerow([r.unique_id, r.game, r.slot_date, r.slot_time, r.telegram_id, r.created_at, status])

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_document(admin_id, FSInputFile(filename, filename))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        os.remove(filename)
    finally:
        session.close()


@dp.message(Command("use"))
async def admin_use(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /use FG-XXXXXX")
        return

    id_to_use = args[1].strip()
    session: Session = SessionLocal()
    try:
        reg = session.query(Registration).filter_by(unique_id=id_to_use).first()
        if not reg:
            await message.answer(f"‚ùå ID {id_to_use} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if reg.used:
            await message.answer(f"‚ö†Ô∏è ID {id_to_use} —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ!")
            return

        reg.used = True
        session.commit()
        await message.answer(f"‚úÖ ID {id_to_use} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π ({reg.game}, {reg.slot_date} {reg.slot_time}).")
    finally:
        session.close()


@dp.message(Command("active"))
async def admin_active(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    session: Session = SessionLocal()
    try:
        regs = session.query(Registration).filter_by(used=False).order_by(Registration.slot_date, Registration.slot_time).all()
        if not regs:
            await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö ID.")
            return

        text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ ID:\n\n"
        for r in regs:
            text += f"{r.unique_id} ‚Üí {r.game} ‚Üí {r.slot_date} {r.slot_time}\n"

        await message.answer(text if len(text) < 4000 else text[:4000])
    finally:
        session.close()


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
